Java 8 features:


Functional Programming:
 - Makes code more concise, less complex, more predictable, and easier to test compared to the legacy style of coding.
 - The functions can be passed as arguments to other functions, returned from other functions, and assigned to variables.
 - Example:
        - Function<String, Integer> lengthFunction = String::length;  // Method reference
	- the length() function is assigned to a variable lengthFunction.
 - Lambda expressions allow you to write the function’s logic in-line without having to create a whole class or method.



1. Functional Interface:

 - It is an interface which contains only on abstract method and any number of static and default methods.
 - These interfaces can be implemented by a lambda expression or a method reference.
 - Also known as SAM(Single Abstract Method) interface.
Why Functional interface has been introduced?

 - Reducing Boilerplate Code with Anonymous Inner Classe
 - Enabling Functional Programming
 - Simplifying Operations with Streams API

Why Functional interface should have only one abstract method?

 - If there were more than one abstract method, it would be ambiguous as to which method the lambda expression should implement.
 - Since there is only one abstract method, the compiler knows exactly which method the lambda is implementing.


Functional Interface with Inheritance:

   @FunctionalInterface					@FunctionalInterface					@FunctionalInterface	
   interface Teacher{					interface Teacher{					interface Teacher{
		public void m1();				public void m1();					public void m1();
	}						}							}
   @FunctionalInterface					@FunctionalInterface					@FunctionalInterface
   interface Professor extends Teacher{			interface Professor extends Teacher{			interface Professor extends Teacher{
	}							public void m1();					public void m2();
							}							}
 
  - Valid functional interface because			- Valid functional interface because			- InValid functional interface because	
    both contains one abstract methods.			  both contains same abstract methods.			  both contains different abstract methods.




2. Lambda Expression:

 - Lambda expression is used to provide the implementation of functional interface.
 - Reduced boilerplate code: No need for anonymous classes.
 - Particularly useful with Java 8 APIs like the Streams API and functional interfaces.   

Features of a lambda expression:

 - Lambda expressions can be passed as a parameter to another method. 
 - Lambda expressions can be standalone without belonging to any class.

 Syntax:
	(parameters) -> expression
	(parameters) -> { statement(s); }

 - Example
 	interface Student{
		public void get();
	}
	Class Main{
		public static void main(String[] args){
			Student student  = () -> System.out.println("He/She is a Student")
			student.get(); // prints He/She is a Student
		}
	}



		
3. Default methods in Interface:

 - Before Java 8 we can only add abstract methods in interface. But in Java 8 they introduced default methods in interface where we can execute method logic
   in the interface.
 - It is not necessary to override default methods. 
 - It will be like default for the classes which implements it. If we want to change the logic of the method in any classes we can override now and 
   implement the method logic in the class.
 - Example: We have Student interface which has studentName() as abstract method and studentDress() as default method. We also have two classes
   NurseryStudent and PrimaryStudent which implements the Student interface. As usual the abstract method will be overridden by each classes and that is not a 
   problem here. The default method studentDress() has a print statement as "Uniform". Now in the Nursery they are allowed to wear color dress. So override 
   the default method and add "Color Dress" in NurseryStudent class. Now the NurseryStudent object will be calling the overridden method whereas the 
   PrimaryStudent object will use the defauld method.

Static methods in Interface:

 - We can also declare static methods inside interface. But this static method cannot be overridden in implementation class.
 - If we want to call the static method in interface we have call with interface name(Ex. Interface.staticMethod()).
 - We can also have main method inside interface and execute. It will execute and will not show compile time error.


4. Method Reference:

 - Method reference is used to refer method of functional interface.
 - It is compact and easy form of lambda expression.
 - The biggest advantage of using method reference is CODE REUSABILITY. Because we can declare method logic once and the method in the functional interface 
   can refer to the declared method whenever needed without duplicating the code.
 - The referenced method should have the SAME ARGUMENTS as the method in the functional interface.
 - Types of Method Reference:
	1.Reference to a static method.
	2. Reference to an instance method.
	3. Reference to a constructor.

 - Eg(referring to instance method): 
	interface Student{
		public void m1();
	}
	Class NurseryStudent{
		public void studentMethod(){
			System.out.println("Hi Nursery Students");
		}
	}
	Class Main{
		public static void main(String []args){
			NurseryStudent ns = new NurseryStudent(); // creating instance 
			Student student =  ns :: studentMethod;   // referring the instance method to the method in function interface
			student.m1();
		}
	}
 - Here when calling student.m1(), m1() refers to the studentMethod(). Instead of implementing the functional interface method, we are referring to the 
    method which is already declared. We are reusing the existing method code here.

 - Eg(constructor reference):
	interface Student{
		public NurseryStudent get();
	}
	Class NurseryStudent{
		NurseryStudent(){
			System.out.println("Hi Nursery Students");
		}
	}
	Class Main{
		public static void main(String []args){
			Student student  = NurseryStudent :: new;
			student.get();
		}
	}
 - Here the functional interface has a method which has return type NurseryStudent. The method get() is referred to the constructor of the NurseryStudent.
   So when we call the get method it is referring to the constructor.




5. Streams:

 - Process sequence of data or elements in collections.
 - It is an interface present inside java.util.stream package.
 - stream() method is present inside collection interface as default method(Stream s = collectors.stream()).

Components of the stream are:
 - A data source
 - Set of Intermediate Operations to process the data source
 - Single Terminal Operation that produces the result

Intermediate Operations:

i) filter()

 - The filter() method in Java Streams which is used to filter elements based on a condition.
 - It accepts Predicate interface as parameter.
 - It is an Intermediate Operation.
 - Syntax: Stream<T> filter(Predicate<? super T> predicate);
 - Example: List<Integer> processedList = list.stream() .filter( x -> x > 100).toList();


ii) map()

 - The map operation transforms each element of a stream by applying a function to it.
 - Create new object from the existing object every time. 
 - It accepts Function interface as a parameter.
 - It is an Intermediate Operation.
 - Syntax: <R> Stream<R> map(Function<? super T, ? extends R> mapper);
 - Example: List<String> upperCaseNames = names.stream().map(String::toUpperCase).toList();

iii) sorted()

 - Sorts elements in natural order or by a custom comparator.
 - Example: List<String> sortedNames = names.stream().sorted().toList();
	    List<String> sortedNames = names.stream().sorted(Comparator.reverseOrder()).toList(); // sort in reverse order.

iv) distinct()
 - Removes duplicate elements from the collections.
 - Example: List<String> uniqueList = list.stream().distinct().toList();

v) limit()
 - Limits the number of elements in the stream.
 - Example: List<String> uniqueList = list.stream().limit(2).toList(); // create a list of size 2

vi) skip()
 - Skips the number of elements in the stream.
 - Example: List<String> uniqueList = list.stream().skip(2).toList(); // skips the first three elements in the list and creates new list


Terminal Operations:

i) collect()
 - Collects the elements into a collection or other types.
 - Example:  - Example: List<String> uniqueList = list.stream().distinct().collect(Collectors.toList());

ii)forEach()
 - The forEach method is used to iterate through every element of the stream.
 - Example: names.stream().forEach(System.out::println);

iii) count()
 - Counts the number of elements in the stream.
 - long count = names.stream().filter(name -> name.startsWith("A")).count();

iv) max() and min()
 - Finds the maximum or minimum value.
 - Example: Optional<Integer> max = numbers.stream().max(Integer::compareTo);
	    Optional<Integer> min = numbers.stream().min(Integer::compareTo);

v) reduce()
 - The reduce operation in Java Streams is a powerful terminal operation that combines the elements of a stream into a single result. 
 - It’s often used to perform operations like summing numbers, concatenating strings, or accumulating values based on a specific logic.
 - Example: List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
	        int sum = numbers.stream().reduce(0, (a, b) -> a + b);
        	System.out.println("Sum: " + sum);

vi) allMatch() anyMatch() noneMatch()
 - return true if it matches condition or not
 - Example: names.stream().allMatch(s -> s.contains("a")); // return true if all the string in the collection matches "a"
	    names.stream().anyMatch(s -> s.contains("a")); // return true if any of the string in the collection matches "a"
	    names.stream().noneMatch(s -> s.contains("a")); // return true if none of the string in the collection matches "a"




How and Why Java streams are LAZY?

 - Intermediate operations don't execute until a terminal operation is invoked.
 - Consider the following code:

	List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David", "Eve");

	Stream<String> nameStream = names.stream()
 	   .filter(name -> {
 	       System.out.println("Filtering: " + name);
        	return name.length() > 3;
  	  });

	System.out.println("Stream pipeline set up but not executed yet.");
	nameStream.collect(Collectors.toList());
 
 - Output of the code:

	Stream pipeline set up but not executed yet.
	Filtering: Alice
	Filtering: Bob
	Filtering: Charlie
	Filtering: David
	Filtering: Eve

 - Explanation:
	- When you call .filter(name -> name.length() > 3), nothing happens immediately.
	- The stream doesn’t process the elements right away. Instead, the filter operation is added to the stream's internal pipeline.
	- This setup is lazy, meaning Java is just "preparing" to filter the names, but it hasn't done any actual filtering yet.
	- At this point, no filtering logic is applied, and you won’t see the "Filtering" print statements yet.

 - Why is Laziness Useful?
	- Efficiency: Laziness allows streams to be more efficient because intermediate operations are only executed when needed. For example, if you're 	  filtering a list but only need the first few results, the stream doesn't have to process the entire list.
	- Composability(combine different components): You can chain multiple operations without any computation happening until you finalize the stream 
	  with a terminal operation. This makes streams flexible and allows you to build complex data pipelines step by step.



6. Date and Time API:

 - In Java 8, the java.time package introduced a completely new and improved API for working with dates and times.
 - It replaces the older java.util.Date and java.util.Calendar classes, providing immutable, and thread-safe approach for handling date and time.
 - Key Classes in java.time:
	- LocalDate: Represents a date (year, month, day) without time.
	- LocalTime: Represents a time (hour, minute, second, nanosecond) without a date.
	- LocalDateTime: Represents both date and time, but without a time zone.
	- ZonedDateTime: Represents a date and time with a time zone.
	- Instant: Represents a timestamp (a moment in time) from the epoch (1970-01-01T00:00:00Z).
	- Duration and Period: Represent the amount of time between two instants (Duration) or dates (Period).
	- DateTimeFormatter: Used for formatting and parsing dates and times.

7. Optional:

 - In Java 8, Optional is a container class that helps manage the absence of a value (i.e., null) in a more explicit and safer way. 
 - It is used to prevent NullPointerException and makes the code more readable.
 - To check whether the is null or not, no need of explicit code. The Optional class itself has inbuilt methods.	