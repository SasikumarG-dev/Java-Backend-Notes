Queue:
 - The Queue interface in Java is a part of the java.util package and extends the Collection interface.
 - It represents a collection designed for holding elements following First-In-First-Out (FIFO) order.


  PriorityQueue:
   - The PriorityQueue is a part of the java.util package and implements the Queue interface. 
   - Unlike a normal queue, where elements are processed in a First-In-First-Out (FIFO) order, a PriorityQueue orders its elements according to their
     natural ordering (e.g., integers from smallest to largest), or by a Comparator provided at the queue's creation.
   - It is an unbounded queue, but it has an internal capacity that grows as elements are added. This queue does not allow null elements, and is based on a 
     binary heap structure for efficient priority-based retrieval.
   - Eg: 
	    class Event {
    		private int id;
    		private String name;
    		private int priority; // Lower number means higher priority
    	    }
	    class EventComparator implements Comparator<Event> {
    		@Override
    		public int compare(Event e1, Event e2) {
       		return Integer.compare(e1.getPriority(), e2.getPriority());
    		}
	     }
	   PriorityQueue<Event> eventQueue = new PriorityQueue<>(new EventComparator());
        The PriorityQueue ensures that the events are processed in the correct priority order without needing to sort the entire list each time.

    Key Features of PriorityQueue:
      * Element Ordering: It's important to note that ordering is not strict; the internal structure doesn't guarantee the entire collection will be sorted, 
                          just that the head is always the highest-priority element. 
      * Custom comparator: A custom Comparator can be passed during construction to define a custom order.
                           Eg: PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
      * Heap Structure: Internally, PriorityQueue uses a binary heap, which allows for efficient retrieval and insertion of elements based on priority. The 		        time complexity for insertion and removal is O(log(n)).
      * No null elements: PriorityQueue does not allow the insertion of null elements because null cannot be compared against other objects for priority.
      * Thread Safety: PriorityQueue is not thread-safe. For concurrent access, consider using PriorityBlockingQueue from the java.util.concurrent package.

    Key Methods in PriorityQueue:
      * boolean offer(E e): Adds the specified element to the priority queue.
      * E poll(): Retrieves and removes the head of the queue (i.e., the element with the highest priority). Returns null if the queue is empty.
      * E peek(): Retrieves, but does not remove, the head of the queue, or returns null if the queue is empty.
      * boolean remove(Object o): Removes a single instance of the specified element from the queue, if present.
      * int size(): Returns the number of elements in the queue.

    When to Use a PriorityQueue:
      - A PriorityQueue is useful when you need to maintain a collection where elements are processed in priority order, rather than insertion order.
      - Task Scheduling: If you need to manage tasks based on their priority, where the most urgent task needs to be processed first.
      - Event Management: Handling events in a simulation where events with the earliest timestamps need to be processed first.
      - The time complexity for retrieving (using .peek()) or removing (using .poll()) the smallest element is O(log n), which is much faster than sorting 	the entire collection and picking the first element.


    When Not to Use a PriorityQueue:
      - When You Need Random Access or Index-Based Access.
      - When You Need to Sort the Entire Collection.
      - When Thread Safety is Required.



  Deque:
    - A Deque is a linear data structure that allows elements to be added or removed from both the front (head) and the back (tail).
    - It is an extension of the Queue interface in Java and offers more flexibility by supporting insertion and removal at both ends.
    - Common implementations of Deque include ArrayDeque and LinkedList.

    Key Features of a Deque:
      - Double-ended operations: Supports insertion, deletion, and access from both ends of the queue.
      - No capacity restrictions: By default, implementations like ArrayDeque grow dynamically (unbounded).
      - LIFO and FIFO support: It can work as a stack and queue 

    Key Methods of the Deque Interface:
      * addFirst(E e): Adds the element at the front of the deque (throws exception if failed).
      * addLast(E e): Adds the element at the back of the deque (throws exception if failed).
      * offerFirst(E e): Adds the element at the front of the deque (returns false if failed).
      * offerLast(E e): Adds the element at the back of the deque (returns false if failed).
      * removeFirst(): Removes and returns the element from the front (throws exception if deque is empty).
      * removeLast(): Removes and returns the element from the back (throws exception if deque is empty).
      * pollFirst(): Removes and returns the element from the front (returns null if deque is empty).
      * pollLast(): Removes and returns the element from the back (returns null if deque is empty).
      * getFirst(): Retrieves, but does not remove, the element at the front (throws exception if deque is empty).
      * getLast(): Retrieves, but does not remove, the element at the back (throws exception if deque is empty).
      * peekFirst(): Retrieves, but does not remove, the element at the front (returns null if deque is empty).
      * peekLast(): Retrieves, but does not remove, the element at the back (returns null if deque is empty).
      * push(E e): Pushes an element onto the front of the deque (equivalent to addFirst(E e)).
      * pop(): Removes and returns the element at the front of the deque (equivalent to removeFirst()).
      * size(): Returns the number of elements in the deque.
      * isEmpty(): Returns true if the deque is empty, otherwise false.



  
ArrayDeque:
  - The ArrayDeque class is a resizable, array-based implementation of the Deque (Double-Ended Queue) interface in Java.
  - Function as both a stack and a queue.
  - For thread-safe operations, you can use ConcurrentLinkedDeque instead.

   Key Features of ArrayDeque:
     - Resizing Array: Internally, ArrayDeque uses a resizable array, meaning its capacity grows dynamically as elements are added.
     - Fast Operations: ArrayDeque provides O(1) time complexity for most operations like adding, removing, and accessing elements from both ends.
     - No Capacity Limit: By default, the size of an ArrayDeque is unbounded, but it resizes automatically as elements are added.
     - Null Elements Not Allowed: ArrayDeque does not permit null values.
     - Stack and Queue Functionality: It can function both as a stack (LIFO) and as a queue (FIFO).

   Use Cases for ArrayDeque:
     - Stack (LIFO): ArrayDeque is faster than Stack because Stack is synchronized (thread-safe), which incurs overhead.
     - As a Queue (FIFO): ArrayDeque is preferable over LinkedList for queue operations because it is more efficient and does not involve node allocations 
       or pointer manipulations.
     - Sliding Window Algorithms: ArrayDeque can be used for implementing sliding window algorithms that require keeping track of maximum or minimum 
       elements within a fixed-size window.
     - Palindrome Checking: It can be used to check if a word is a palindrome by comparing characters from both ends of the deque.
     - Expression Evaluation (Balanced Parentheses): Evaluate balanced parentheses or solve other expression-related problems by treating it as a stack.

   Pros:
     - Adding or removing elements at either end: O(1).
     - Accessing the front or back elements: O(1).
     - Iterating over the elements: O(n) (linear time).
   Cons:
     - No Null Elements: ArrayDeque does not allow null elements. Attempting to insert null will result in a NullPointerException.
     - Not Thread-Safe: ArrayDeque is not thread-safe.



