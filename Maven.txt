Maven:

	- It is a project management tool which helps build generation, dependency resolution, documentation, etc..
	- It helps manage the entire build lifecycle of a project, from compiling and testing to packaging and deployment.
	- Maven uses POM to achieve all this.

Maven vs Ant:

 * Before Maven we use Ant build tool.
 * In Ant we have to tell what to do and how to do but it maven if we tell what to do maven will automatically do the configuration.
 * Ant is only a build tool but maven is a Project Management tool.

Build Lifecycles:

validate  - validate the project is correct and all necessary information is available. It checks if all the dependencies have been downloaded and are 	    	    available in the local repository.
compile   - It compiles the source code, converts the .java files to .class, and stores the classes in the target/classes folder.
test      - test the compiled source code using a suitable unit testing framework.
package   - take the compiled code and package it in its distributable format, such as a JAR.
verify    - run any checks on results of integration tests to ensure quality criteria are met (Eg. code analysis like unused variables, imports, duplicate 	    code, etc..).
install   - install the package into the local repository, for use as a dependency in other projects locally
deploy    - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.

POM.xml Example:

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Project Metadata -->
    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>My App</name>
    <url>http://example.com/my-app</url>

    <!-- Dependencies -->
    <dependencies>
        <!-- Example: JUnit for testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Example: Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>2.5.4</version>
        </dependency>
    </dependencies>

    <!-- Build Configuration -->
    <build>
        <plugins>
            <!-- Compiler Plugin: specify Java version -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- Surefire Plugin: run tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>

            <!-- Shade Plugin: create an uber-JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!-- Profiles: different configurations for different environments -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <env>dev</env>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <env>prod</env>
            </properties>
        </profile>
    </profiles>
</project>
